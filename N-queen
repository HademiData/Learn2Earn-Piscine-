package main

import "github.com/01-edu/z01"

func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

// this function checks for diagonals and rows that are not safe for a queen
func isSafe(positions []int, col, row int) bool {
	for c := 0; c < col; c++ {
		r := positions[c]
		if r == row || abs(r-row) == abs(c-col) {
			return false
		}
	}
	return true
}

func solve(col int, positions []int, n int) {
	if col == n {
		for _, row := range positions {
			z01.PrintRune(rune('0' + row))
		}
		z01.PrintRune('\n')
	}

	for row := 1; row <= n; row++ {
		if isSafe(positions, col, row) {
			positions[col] = row
			solve(col+1, positions, n)
		}

	}
}

func NQueens(n int) {
	positions := make([]int, n)
	solve(0, positions, n)
}

func main() {
	NQueens(8)
}
